plugins {
    id 'java-library'
    id "java-test-fixtures"
    id "com.github.davidmc24.gradle.plugin.avro-base" version "1.3.0"
    id "com.github.node-gradle.node" version "6.0.0"
}

sourceSets {
    test.java.srcDirs = ['test/java']
    test.resources.srcDirs = ['test/resources']
    testFixtures.java.srcDirs = ['testFixtures/java','build/generated-java']
    testFixtures.resources.srcDirs = ['testFixtures/resources','testFixtures/schema']
    main.java.srcDirs = ['unused']
    main.resources.srcDirs = ['unused']
}

import com.github.davidmc24.gradle.plugin.avro.GenerateAvroJavaTask

apply plugin: "com.github.davidmc24.gradle.plugin.avro-base"
apply plugin: "com.github.node-gradle.node"

group 'strata.foundation'
version '1.0-SNAPSHOT'

configurations {
    avroSchema
}

dependencies {
    implementation "org.apache.avro:avro:1.11.0"
    avroSchema project(':Components:Strata.Foundation.Core')
}

def importAvroSchema = tasks.register('importAvroSchema', Copy) {
    dependsOn(':Components:Strata.Foundation.Core:jar')
    from {
        configurations.avroSchema.collect { it.isDirectory() ? it : zipTree(it) }
    }
    include "avro/*.avsc"
    into layout.buildDirectory.dir("imported-schema")
}

def genAvro = tasks.register("genAvro", GenerateAvroJavaTask) {
    source = [file("testFixtures/schema"),file("build/imported-schema")]
    outputDir = file("build/generated-java")
    createSetters = true
    createOptionalGetters = false
    gettersReturnOptional = false
    optionalGettersForNullableFieldsOnly = false
    fieldVisibility = "PRIVATE"
    outputCharacterEncoding = "UTF-8"
    stringType = "String"
    enableDecimalLogicalType = true
}

tasks.named("genAvro").configure {
    source(importAvroSchema)
}

tasks.named("compileJava").configure {
    source(genAvro)
}

dependencies {
    testImplementation project(':Components:Strata.Foundation.Core')
    testFixturesApi project(':Components:Strata.Foundation.Core')
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.9.3'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.3'
    testFixturesImplementation 'org.junit.jupiter:junit-jupiter-params:5.9.3'
    testFixturesImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.3'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.3'
}

test {
    useJUnitPlatform {
        includeTags("CommitStage")
    }
}


node {
    download = false
    npmInstallCommand = "install"
    nodeProjectDir = file("${project.projectDir}/main/typescript")
    nodeProxySettings = ProxySettings.SMART
}

npm_pack {

}

npm_publish {

}

npm_version_patch {
}

npm_version_minor {
}

npm_version_major {
}

task dependencyTypescript(type: NpmTask)
{
    args = ['install','strata.foundation.core']
}

task compileTypescript(type: NpxTask)
{
    dependsOn 'dependencyTypescript'
    command = 'tsc'
    inputs.files('package.json', 'package-lock.json', 'tsconfig.json')
    inputs.dir('main/typescript')
    inputs.dir(fileTree("node_modules").exclude(".cache"))
    outputs.dir('build/dist')
}

task testTypescript(type: NpxTask) {
    dependsOn compileTypescript
    command = 'jest'
    inputs.files('package.json', 'package-lock.json', 'tsconfig.json')
    inputs.dir(fileTree("node_modules").exclude(".cache"))
}